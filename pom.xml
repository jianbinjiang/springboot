<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.hk</groupId>
	<artifactId>springboot</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>springboot</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
		<!-- 指定要执行的类，如果不指定的话，Spring会找有这个【public static void main(String[] args)】方法的类，当做可执行的类。 -->
		<!-- POM是继承spring-boot-starter-parent的话，只需要下面的指定就行 -->
		<!-- <start-class>com.hk.springboot.App</start-class> -->
	</properties>

	<!-- springboot官方推荐我们使用spring-boot-starter-parent，spring-boot-starter-parent包含了以下信息： 
		1、使用java6编译级别 2、使用utf-8编码 3、实现了通用的测试框架 (JUnit, Hamcrest, Mockito). 4、智能资源过滤 
		5、智能的插件配置(exec plugin, surefire, Git commit ID, shade). 如果你需要改变java的编译级别则可以添加属性： 
		<properties><java.version>1.8</java.version></properties> 当然，任何一个成熟的框架都是可灵活配置的，我们也可以不使用spring-boot-starter-parent，可以自己配置 
		<dependencyManagement><dependencies><dependency><groupId>org.springframework.boot</groupId>spring-boot-starter-parent<version>1.0.2.BUILD-SNAPSHOT</version><type>pom</type><scope>import</scope></dependency></dependencies></dependencyManagement> -->


	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.4.0.RELEASE</version>
	</parent>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>1.4.0.RELEASE</version>
			<!-- 剔除在创建SpringBoot工程时,引入了 spring-boot-starter,其中包含了 spring-boot-starter-logging,该依赖内容就是Spring Boot默认的日志框架Logback -->
			 <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
		</dependency>
		<!-- Swagger扫描解析得到的是一个json文档，对于用户不太友好,swagger-ui，它能够友好的展示解析得到的接口说明内容。 -->
		<dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.5.0</version>
            <scope>compile</scope>
        </dependency>
        <!-- 生成api文档   构建Restful API --> 
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.5.0</version>
            <scope>compile</scope>
        </dependency>
        
		<!-- 数据库访问 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
			<version>1.4.0.RELEASE</version>
		</dependency>
		<!-- h2是一个内存关系型数据库 -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.192</version>
		</dependency>

		<!-- mysql驱动加载 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>6.0.3</version>
		</dependency>
		<!-- 模板引擎 -->
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-thymeleaf -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
			<version>1.4.0.RELEASE</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-log4j -->
		<!-- 添加log4j输出日志 -->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-log4j</artifactId>
		    <version>1.3.7.RELEASE</version>
		</dependency>
		
		<dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.2</version>
        </dependency>
		

		<!-- Spring Boot的配置简单的安全访问控制， -->
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security -->
		<!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-security</artifactId> 
			<version>1.4.0.RELEASE</version> </dependency> -->

		<!-- <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> 
			<version>1.4.0.RELEASE</version> </dependency> -->
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
	<!-- OM 文件中添加了“org.springframework.boot:spring-boot-maven-plugin”插件。在添加了该插件之后，当运行“mvn 
		package”进行打包时，会打包成一个可以直接运行的 JAR 文件，使用“java -jar”命令就可以直接运行。这在很大程度上简化了应用的部署，只需要安装了 
		JRE 就可以运行。 可以在POM中，指定生成 的是Jar还是War。 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>1.4.0.RELEASE</version>
			</plugin>
		</plugins>
	</build>
</project>
